<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker命令大全</title>
      <link href="/hexo-blog/2024/06/01/docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>/hexo-blog/2024/06/01/docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#info|version</span></span><br><span class="line">docker info       <span class="comment">#显示docker的系统信息，包括镜像和容器的数量</span></span><br><span class="line">docker version    <span class="comment">#显示docker的版本信息。</span></span><br><span class="line"><span class="comment">#帮助命令</span></span><br><span class="line">docker 命令 --<span class="built_in">help</span> <span class="comment">#帮助命令</span></span><br><span class="line"><span class="comment">#镜像命令</span></span><br><span class="line">docker images <span class="comment">#查看所有本地主机上的镜像 可以使用docker image ls代替</span></span><br><span class="line">docker search <span class="comment">#搜索镜像</span></span><br><span class="line">docker pull <span class="comment">#下载镜像 docker image pull</span></span><br><span class="line">docker rmi <span class="comment">#删除镜像 docker image rm</span></span><br><span class="line"><span class="comment">#容器命令</span></span><br><span class="line">docker run 镜像<span class="built_in">id</span> <span class="comment">#新建容器并启动</span></span><br><span class="line">docker ps 列出所有运行的容器 docker container list</span><br><span class="line">docker <span class="built_in">rm</span> 容器<span class="built_in">id</span> <span class="comment">#删除指定容器</span></span><br><span class="line"><span class="comment">#删除所有容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -aq)   <span class="comment">#删除所有的容器</span></span><br><span class="line">docker ps -a -q|xargs docker <span class="built_in">rm</span>  <span class="comment">#删除所有的容器</span></span><br><span class="line"><span class="comment">#启动和停止容器</span></span><br><span class="line">docker start 容器<span class="built_in">id</span><span class="comment">#启动容器</span></span><br><span class="line">docker restart 容器<span class="built_in">id</span><span class="comment">#重启容器</span></span><br><span class="line">docker stop 容器<span class="built_in">id</span><span class="comment">#停止当前正在运行的容器</span></span><br><span class="line">docker <span class="built_in">kill</span> 容器<span class="built_in">id</span><span class="comment">#强制停止当前容器</span></span><br><span class="line"><span class="comment">#退出容器</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment">#容器直接退出</span></span><br><span class="line">ctrl +P +Q  <span class="comment">#容器不停止退出 ---注意：这个很有用的操作</span></span><br><span class="line"><span class="comment">#其他常用命令</span></span><br><span class="line">docker run -d 镜像名  <span class="comment">#后台启动命令</span></span><br><span class="line">docker logs <span class="comment">#查看日志</span></span><br><span class="line">docker top 容器<span class="built_in">id</span> <span class="comment">#查看容器中进程信息ps</span></span><br><span class="line">docker inspect 容器<span class="built_in">id</span>  <span class="comment">#查看镜像的元数据</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 899c718ac4fe(容器<span class="built_in">id</span>) /bin/bash  <span class="comment">#进入当前容器后开启一个新的终端，可以在里面操作。（常用）</span></span><br><span class="line">docker attach <span class="comment"># 进入容器正在执行的终端</span></span><br><span class="line">docker <span class="built_in">cp</span> 容器<span class="built_in">id</span>:容器内路径  主机目的路径<span class="comment">#从容器内拷贝到主机上</span></span><br></pre></td></tr></table></figure><h2 id="docker命令大全"><a href="#docker命令大全" class="headerlink" title="docker命令大全"></a>docker命令大全</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker attach<span class="comment">#连接到正在运行中的容器</span></span><br><span class="line">docker build<span class="comment">#使用 Dockerfile 创建镜像</span></span><br><span class="line">docker builder<span class="comment">#管理builds</span></span><br><span class="line">docker builder prune<span class="comment">#清除build缓存</span></span><br><span class="line">docker checkpoint<span class="comment">#管理checkpoints</span></span><br><span class="line">docker checkpoint create<span class="comment">#从正在运行的容器创建检查点</span></span><br><span class="line">docker checkpoint <span class="built_in">ls</span><span class="comment">#列出容器的检查点</span></span><br><span class="line">docker checkpoint <span class="built_in">rm</span><span class="comment">#删除指定的检查点</span></span><br><span class="line">docker commit<span class="comment">#从容器创建一个新的镜像</span></span><br><span class="line">docker config<span class="comment">#管理Docker配置</span></span><br><span class="line">docker config create<span class="comment">#创建配置文件</span></span><br><span class="line">docker config inspect<span class="comment">#查看配置文件信息</span></span><br><span class="line">docker config <span class="built_in">ls</span><span class="comment">#显示docker里已经保存得配置文件</span></span><br><span class="line">docker config <span class="built_in">rm</span><span class="comment">#删除配置文件</span></span><br><span class="line">docker container<span class="comment">#管理容器</span></span><br><span class="line">docker container prune<span class="comment">#删除所有已停止的容器</span></span><br><span class="line">docker context<span class="comment">#管理contexts</span></span><br><span class="line">docker context create<span class="comment">#创建一个上下文</span></span><br><span class="line">docker context <span class="built_in">export</span><span class="comment">#将上下文导出到tar或kubecconfig文件中</span></span><br><span class="line">docker context import<span class="comment">#从tar或zip文件导入上下文</span></span><br><span class="line">docker context inspect<span class="comment">#在一个或多个上下文上显示详细信息</span></span><br><span class="line">docker context <span class="built_in">ls</span><span class="comment">#列出上下文</span></span><br><span class="line">docker context <span class="built_in">rm</span><span class="comment">#删除一个或多个上下文</span></span><br><span class="line">docker context update<span class="comment">#更新</span></span><br><span class="line">docker context use<span class="comment">#设置当前docker的上下文</span></span><br><span class="line">docker <span class="built_in">cp</span><span class="comment">#用于容器与主机之间的数据拷贝</span></span><br><span class="line">docker create<span class="comment">#创建一个新的容器但不启动它</span></span><br><span class="line">docker diff<span class="comment">#检查容器里文件结构的更改</span></span><br><span class="line">docker events<span class="comment">#从服务器获取实时事件</span></span><br><span class="line">docker <span class="built_in">exec</span><span class="comment">#在运行的容器中执行命令</span></span><br><span class="line">docker <span class="built_in">export</span><span class="comment">#将文件系统作为一个tar归档文件导出到STDOUT</span></span><br><span class="line">docker <span class="built_in">history</span><span class="comment">#查看指定镜像的创建历史</span></span><br><span class="line">docker image<span class="comment">#管理镜像</span></span><br><span class="line">docker image inspect<span class="comment">#显示一个或多个镜像的元数据</span></span><br><span class="line">docker image <span class="built_in">ls</span><span class="comment">#列出本地镜像</span></span><br><span class="line">docker image prune<span class="comment">#删除没有使用的镜像</span></span><br><span class="line">docker image <span class="built_in">rm</span><span class="comment">#删除一个或多个镜像</span></span><br><span class="line">docker images<span class="comment">#列出本地镜像</span></span><br><span class="line">docker import<span class="comment">#从归档文件中创建镜像</span></span><br><span class="line">docker info<span class="comment">#显示 Docker 系统信息，包括镜像和容器数</span></span><br><span class="line">docker inspect<span class="comment">#获取容器/镜像的元数据</span></span><br><span class="line">docker <span class="built_in">kill</span><span class="comment">#杀掉一个运行中的容器</span></span><br><span class="line">docker load<span class="comment">#导入使用 docker save 命令导出的镜像</span></span><br><span class="line">docker login<span class="comment">#登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</span></span><br><span class="line">docker <span class="built_in">logout</span><span class="comment">#登出一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</span></span><br><span class="line">docker logs<span class="comment">#获取容器的日志</span></span><br><span class="line">docker manifest<span class="comment">#管理manifest(实验，不应用于生产环境)</span></span><br><span class="line">docker manifest annotate<span class="comment">#向本地镜像清单添加附加信息</span></span><br><span class="line">docker manifest create<span class="comment">#创建用于注释和推入注册表的本地清单列表</span></span><br><span class="line">docker manifest inspect<span class="comment">#显示镜像清单或清单列表</span></span><br><span class="line">docker manifest push<span class="comment">#将清单列表推入仓库</span></span><br><span class="line">docker manifest <span class="built_in">rm</span><span class="comment">#从本地存储中删除一个或多个清单列表</span></span><br><span class="line">docker network<span class="comment">#管理网络</span></span><br><span class="line">docker network connect<span class="comment">#将容器连接到网络</span></span><br><span class="line">docker network create<span class="comment">#创建一个网络</span></span><br><span class="line">docker network disconnect<span class="comment">#断开容器的网络</span></span><br><span class="line">docker network inspect<span class="comment">#显示一个或多个网络的元数据</span></span><br><span class="line">docker network <span class="built_in">ls</span><span class="comment">#列出网络</span></span><br><span class="line">docker network prune<span class="comment">#删除所有没有使用的网络</span></span><br><span class="line">docker network <span class="built_in">rm</span><span class="comment">#删除一个或多个网络</span></span><br><span class="line">docker node<span class="comment">#管理集群(swarm)节点</span></span><br><span class="line">docker node demote<span class="comment">#从群集(swarm)管理器中降级一个或多个节点</span></span><br><span class="line">docker node inspect<span class="comment">#显示一个或多个节点的元数据</span></span><br><span class="line">docker node <span class="built_in">ls</span><span class="comment">#列出群集(swarm)中的节点</span></span><br><span class="line">docker node promote<span class="comment">#将一个或多个节点推入到群集管理器中</span></span><br><span class="line">docker node ps<span class="comment">#列出在一个或多个节点上运行的任务，默认为当前节点</span></span><br><span class="line">docker node <span class="built_in">rm</span><span class="comment">#从群集(swarm)删除一个或多个节点</span></span><br><span class="line">docker node update<span class="comment">#更新一个节点</span></span><br><span class="line">docker pause<span class="comment">#暂停容器中所有的进程</span></span><br><span class="line">docker plugin<span class="comment">#管理插件</span></span><br><span class="line">docker plugin create<span class="comment">#从rootfs和配置创建一个插件。插件数据目录必须包含config.json和rootfs目录。</span></span><br><span class="line">docker plugin <span class="built_in">disable</span><span class="comment">#禁用插件</span></span><br><span class="line">docker plugin <span class="built_in">enable</span><span class="comment">#启用插件</span></span><br><span class="line">docker plugin inspect<span class="comment">#显示一个或多个插件的元数据</span></span><br><span class="line">docker plugin install<span class="comment">#安装一个插件</span></span><br><span class="line">docker plugin <span class="built_in">ls</span><span class="comment">#列出所有插件</span></span><br><span class="line">docker plugin push<span class="comment">#将插件推送到注册表</span></span><br><span class="line">docker plugin <span class="built_in">rm</span><span class="comment">#删除一个或多个插件</span></span><br><span class="line">docker plugin <span class="built_in">set</span><span class="comment">#更改插件的设置</span></span><br><span class="line">docker plugin upgrade<span class="comment">#升级现有插件</span></span><br><span class="line">docker port<span class="comment">#列出指定的容器的端口映射，或者查找将PRIVATE_PORT NAT到面向公众的端口</span></span><br><span class="line">docker ps<span class="comment">#列出容器</span></span><br><span class="line">docker pull<span class="comment">#从镜像仓库中拉取或者更新指定镜像</span></span><br><span class="line">docker push<span class="comment">#将本地的镜像上传到镜像仓库,要先登陆到镜像仓库</span></span><br><span class="line">docker rename<span class="comment">#重命名容器</span></span><br><span class="line">docker restart<span class="comment">#重启容器</span></span><br><span class="line">docker <span class="built_in">rm</span><span class="comment">#删除一个或多个容器</span></span><br><span class="line">docker rmi<span class="comment">#删除一个或多个镜像</span></span><br><span class="line">docker run<span class="comment">#创建一个新的容器并运行一个命令</span></span><br><span class="line">docker save<span class="comment">#将指定镜像保存成 tar 归档文件</span></span><br><span class="line">docker search<span class="comment">#从Docker Hub查找镜像</span></span><br><span class="line">docker secret<span class="comment">#管理Docker secrets</span></span><br><span class="line">docker secret create<span class="comment">#从文件或STDIN创建一个秘密作为内容</span></span><br><span class="line">docker secret inspect<span class="comment">#显示有关一个或多个秘密的详细信息</span></span><br><span class="line">docker secret <span class="built_in">ls</span><span class="comment">#列出秘密</span></span><br><span class="line">docker secret <span class="built_in">rm</span><span class="comment">#删除一个或多个秘密</span></span><br><span class="line">docker service<span class="comment">#管理服务</span></span><br><span class="line">docker service create<span class="comment">#创建一个服务</span></span><br><span class="line">docker service inspect<span class="comment">#查看服务的元数据</span></span><br><span class="line">docker service logs<span class="comment">#获取服务的日志</span></span><br><span class="line">docker service <span class="built_in">ls</span><span class="comment">#列出服务</span></span><br><span class="line">docker service ps<span class="comment">#列出一个或多个服务的任务</span></span><br><span class="line">docker service <span class="built_in">rm</span><span class="comment">#删除一个或多个服务</span></span><br><span class="line">docker service rollback<span class="comment">#将更改恢复到服务的配置</span></span><br><span class="line">docker service scale<span class="comment">#缩放一个或多个复制服务</span></span><br><span class="line">docker service update<span class="comment">#更新服务</span></span><br><span class="line">docker stack<span class="comment">#管理堆栈</span></span><br><span class="line">docker stack deploy<span class="comment">#部署新的堆栈或更新现有堆栈</span></span><br><span class="line">docker stack <span class="built_in">ls</span><span class="comment">#列出现有堆栈</span></span><br><span class="line">docker stack ps<span class="comment">#列出堆栈中的任务</span></span><br><span class="line">docker stack <span class="built_in">rm</span><span class="comment">#删除堆栈</span></span><br><span class="line">docker stack services<span class="comment">#列出堆栈中的服务</span></span><br><span class="line">docker start<span class="comment">#启动一个或多个已经被停止的容器</span></span><br><span class="line">docker stats<span class="comment">#显示容器的实时流资源使用统计信息</span></span><br><span class="line">docker stop<span class="comment">#停止一个运行中的容器</span></span><br><span class="line">docker swarm<span class="comment">#管理集群(Swarm)</span></span><br><span class="line">docker swarm ca<span class="comment">#查看或旋转当前群集CA证书。此命令必须针对管理器节点</span></span><br><span class="line">docker swarm init<span class="comment">#初始化一个群集(Swarm)</span></span><br><span class="line">docker swarm <span class="built_in">join</span><span class="comment">#加入群集作为节点和/或管理器</span></span><br><span class="line">docker swarm join-token<span class="comment">#管理加入令牌</span></span><br><span class="line">docker swarm leave<span class="comment">#离开群集(Swarm)</span></span><br><span class="line">docker swarm unlock<span class="comment">#解锁群集(Swarm)</span></span><br><span class="line">docker swarm unlock-key<span class="comment">#管理解锁钥匙</span></span><br><span class="line">docker swarm update<span class="comment">#更新群集(Swarm)</span></span><br><span class="line">docker system<span class="comment">#管理Docker</span></span><br><span class="line">docker system <span class="built_in">df</span><span class="comment">#显示docker磁盘使用情况</span></span><br><span class="line">docker system events<span class="comment">#从服务器获取实时事件</span></span><br><span class="line">docker system info<span class="comment">#显示系统范围的信息</span></span><br><span class="line">docker system prune<span class="comment">#删除未使用的数据</span></span><br><span class="line">docker tag<span class="comment">#标记本地镜像，将其归入某一仓库</span></span><br><span class="line">docker top<span class="comment">#查看容器中运行的进程信息，支持 ps 命令参数</span></span><br><span class="line">docker trust<span class="comment">#管理Docker镜像的信任</span></span><br><span class="line">docker trust inspect<span class="comment">#返回有关key和签名的低级信息</span></span><br><span class="line">docker trust key<span class="comment">#管理登入Docker镜像的keys</span></span><br><span class="line">docker trust key generate<span class="comment">#生成并加载签名密钥对</span></span><br><span class="line">docker trust key load<span class="comment">#加载私钥文件以进行签名</span></span><br><span class="line">docker trust revoke<span class="comment">#删除对镜像的认证</span></span><br><span class="line">docker trust sign<span class="comment">#镜像签名</span></span><br><span class="line">docker trust signer<span class="comment">#管理可以登录Docker镜像的实体</span></span><br><span class="line">docker trust signer add<span class="comment">#新增一个签名者</span></span><br><span class="line">docker trust signer remove<span class="comment">#删除一个签名者</span></span><br><span class="line">docker unpause<span class="comment">#恢复容器中所有的进程</span></span><br><span class="line">docker update<span class="comment">#更新一个或多个容器的配置</span></span><br><span class="line">docker version<span class="comment">#显示 Docker 版本信息</span></span><br><span class="line">docker volume<span class="comment">#管理volumes</span></span><br><span class="line">docker volume create<span class="comment">#创建一个卷</span></span><br><span class="line">docker volume inspect<span class="comment">#显示一个或多个卷的元数据</span></span><br><span class="line">docker volume <span class="built_in">ls</span><span class="comment">#列出卷</span></span><br><span class="line">docker volume prune<span class="comment">#删除所有未使用的卷</span></span><br><span class="line">docker volume <span class="built_in">rm</span><span class="comment">#删除一个或多个卷</span></span><br><span class="line">docker <span class="built_in">wait</span><span class="comment">#阻塞运行直到容器停止，然后打印出它的退出代码</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3下pinia的使用</title>
      <link href="/hexo-blog/2024/06/01/vue3%E4%B8%8Bpinia%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/hexo-blog/2024/06/01/vue3%E4%B8%8Bpinia%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3-中-pinia-的使用"><a href="#Vue3-中-pinia-的使用" class="headerlink" title="Vue3 中 pinia 的使用"></a>Vue3 中 pinia 的使用</h1><blockquote><p><strong>pinia 是一款 vue 插件,作用是对 vue 中的数据做持久化存储,并且允许你跨组件或页面共享状态</strong></p></blockquote><p><strong>下载 pinia</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -d pinia</span><br></pre></td></tr></table></figure><p><strong>在 mian.js 中添加:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line">app.<span class="title function_">use</span>(pinia);</span><br></pre></td></tr></table></figure><p><strong>常用 API</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">createPinia defineStore storeToRefs</span><br></pre></td></tr></table></figure><p><strong>stores&#x2F;counter.js</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; computed, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&quot;countId&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// state</span></span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> list = <span class="title function_">ref</span>([]);</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">API_URL</span> = <span class="string">&quot;https://applet-base-api-t.itheima.net/api/cart&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getter</span></span><br><span class="line">  <span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// action</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    count.<span class="property">value</span>++;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getList</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="variable constant_">API_URL</span>);</span><br><span class="line">    list.<span class="property">value</span> = res.<span class="property">data</span>.<span class="property">list</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count,</span><br><span class="line">    list,</span><br><span class="line">    doubleCount,</span><br><span class="line">    increment,</span><br><span class="line">    getList,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useCounterStore &#125; from &quot;@/stores/counter&quot;;</span><br><span class="line">import &#123; storeToRefs &#125; from &quot;pinia&quot;;</span><br><span class="line">import &#123; onMounted &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const store = useCounterStore();</span><br><span class="line">const &#123; count, doubleCount, list &#125; = storeToRefs(store);</span><br><span class="line">const &#123; increment, getList &#125; = store;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  getList();</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;count的值为:&amp;emsp;&amp;emsp;&#123;&#123; count &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;count * 2的值为:&amp;emsp;&amp;emsp;&#123;&#123; doubleCount &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;increment&quot;&gt;按钮(点击后count++)&lt;/button&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;good in list&quot;&gt;</span><br><span class="line">      goods_id:&#123;&#123; good.goods_id &#125;&#125;&amp;emsp;goods_name:&#123;&#123; good.goods_name &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gorm的关联关系</title>
      <link href="/hexo-blog/2024/06/01/gorm/"/>
      <url>/hexo-blog/2024/06/01/gorm/</url>
      
        <content type="html"><![CDATA[<h1 id="gorm-的-Many-To-Many"><a href="#gorm-的-Many-To-Many" class="headerlink" title="gorm 的 Many To Many"></a>gorm 的 Many To Many</h1><h2 id="Many-To-Many"><a href="#Many-To-Many" class="headerlink" title="Many To Many"></a>Many To Many</h2><p>Many to Many 会在两个 model 中添加一张连接表。</p><p>例如，您的应用包含了 user 和 language，且一个 user 可以说多种 language，多个 user 也可以说一种 language。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User 拥有并属于多种 language，`user_languages` 是连接表</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Languages []Language <span class="string">`gorm:&quot;many2many:user_languages;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Language <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用 GORM 的 <code>AutoMigrate</code> 为 <code>User</code> 创建表时，GORM 会自动创建连接表</p><h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User 拥有并属于多种 language，`user_languages` 是连接表</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Languages []*Language <span class="string">`gorm:&quot;many2many:user_languages;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Language <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">  Users []*User <span class="string">`gorm:&quot;many2many:user_languages;&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写外键"><a href="#重写外键" class="headerlink" title="重写外键"></a>重写外键</h2><p>对于 <code>many2many</code> 关系，连接表会同时拥有两个模型的外键，例如：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Languages []Language <span class="string">`gorm:&quot;many2many:user_languages;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Language <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Join Table: user_languages</span></span><br><span class="line"><span class="comment">//   foreign key: user_id, reference: users.id</span></span><br><span class="line"><span class="comment">//   foreign key: language_id, reference: languages.id</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若要重写它们，可以使用标签 <code>foreignKey</code>、<code>references</code>、<code>joinforeignKey</code>、<code>joinReferences</code>。当然，您不需要使用全部的标签，你可以仅使用其中的一个重写部分的外键、引用。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    Profiles []Profile <span class="string">`gorm:&quot;many2many:user_profiles;foreignKey:Refer;joinForeignKey:UserReferID;References:UserRefer;joinReferences:ProfileRefer&quot;`</span></span><br><span class="line">    Refer    <span class="type">uint</span>      <span class="string">`gorm:&quot;index:,unique&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Profile <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    Name      <span class="type">string</span></span><br><span class="line">    UserRefer <span class="type">uint</span> <span class="string">`gorm:&quot;index:,unique&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这会创建连接表：user_profiles</span></span><br><span class="line"><span class="comment">//   外键: user_refer_id, 引用: users.refer</span></span><br><span class="line"><span class="comment">//   外键: profile_refer, 引用: profiles.user_refer</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> 某些数据库只允许在唯一索引字段上创建外键，如果您在迁移时会创建外键，则需要指定 <code>unique index</code> 标签。</p></blockquote><h2 id="自引用-Many2Many"><a href="#自引用-Many2Many" class="headerlink" title="自引用 Many2Many"></a>自引用 Many2Many</h2><p>自引用 many2many 关系</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">    Friends []*User <span class="string">`gorm:&quot;many2many:user_friends&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会创建连接表：user_friends</span></span><br><span class="line"><span class="comment">//   foreign key: user_id, reference: users.id</span></span><br><span class="line"><span class="comment">//   foreign key: friend_id, reference: users.id</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h2><p>GORM 可以通过 <code>Preload</code> 预加载 has many 关联的记录，查看 <a href="https://gorm.io/zh_CN/docs/preload.html">预加载</a> 获取详情</p><h2 id="Many2Many-的-CURD"><a href="#Many2Many-的-CURD" class="headerlink" title="Many2Many 的 CURD"></a>Many2Many 的 CURD</h2><p>查看 <a href="https://gorm.io/zh_CN/docs/associations.html#Association-Mode">关联模式</a> 获取 many2many 相关的用法</p><h2 id="自定义连接表"><a href="#自定义连接表" class="headerlink" title="自定义连接表"></a>自定义连接表</h2><p><code>连接表</code> 可以是一个全功能的模型，支持 <code>Soft Delete</code>、<code>钩子</code>、定义更多的字段，就跟其它模型一样。您可以通过 <code>SetupJoinTable</code> 指定它，例如：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="type">int</span></span><br><span class="line">  Name      <span class="type">string</span></span><br><span class="line">  Addresses []Address <span class="string">`gorm:&quot;many2many:person_addresses;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="type">uint</span></span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PersonAddress <span class="keyword">struct</span> &#123;</span><br><span class="line">  PersonID  <span class="type">int</span></span><br><span class="line">  AddressID <span class="type">int</span></span><br><span class="line">  CreatedAt time.Time</span><br><span class="line">  DeletedAt gorm.DeletedAt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(PersonAddress)</span></span> BeforeCreate(db *gorm.DB) <span class="type">error</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 Person 的 Addresses 字段的连接表为 PersonAddress</span></span><br><span class="line"><span class="comment">// PersonAddress 必须定义好所需的外键，否则会报错</span></span><br><span class="line">err := db.SetupJoinTable(&amp;Person&#123;&#125;, <span class="string">&quot;Addresses&quot;</span>, &amp;PersonAddress&#123;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><p>你可以通过为标签 <code>constraint</code> 配置 <code>OnUpdate</code>、<code>OnDelete</code> 实现外键约束，在使用 GORM 进行迁移时它会被创建，例如：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Languages []Language <span class="string">`gorm:&quot;many2many:user_speaks;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Language <span class="keyword">struct</span> &#123;</span><br><span class="line">  Code <span class="type">string</span> <span class="string">`gorm:&quot;primarykey&quot;`</span></span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CREATE TABLE `user_speaks` (`user_id` integer,`language_code` text,PRIMARY KEY (`user_id`,`language_code`),CONSTRAINT `fk_user_speaks_user` FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE SET NULL ON UPDATE CASCADE,CONSTRAINT `fk_user_speaks_language` FOREIGN KEY (`language_code`) REFERENCES `languages`(`code`) ON DELETE SET NULL ON UPDATE CASCADE);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你也可以在删除记录时通过 <code>Select</code> 来删除 many2many 关系的记录，查看 <a href="https://gorm.io/zh_CN/docs/associations.html#delete_with_select">Delete with Select</a> 获取详情</p><h2 id="复合外键"><a href="#复合外键" class="headerlink" title="复合外键"></a>复合外键</h2><p>如果您的模型使用了 <a href="https://gorm.io/zh_CN/docs/composite_primary_key.html">复合主键</a>，GORM 会默认启用复合外键。</p><p>您也可以覆盖默认的外键、指定多个外键，只需用逗号分隔那些键名，例如：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Tag <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID     <span class="type">uint</span>   <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  Locale <span class="type">string</span> <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  Value  <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Blog <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID         <span class="type">uint</span>   <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  Locale     <span class="type">string</span> <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  Subject    <span class="type">string</span></span><br><span class="line">  Body       <span class="type">string</span></span><br><span class="line">  Tags       []Tag <span class="string">`gorm:&quot;many2many:blog_tags;&quot;`</span></span><br><span class="line">  LocaleTags []Tag <span class="string">`gorm:&quot;many2many:locale_blog_tags;ForeignKey:id,locale;References:id&quot;`</span></span><br><span class="line">  SharedTags []Tag <span class="string">`gorm:&quot;many2many:shared_blog_tags;ForeignKey:id;References:id&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接表：blog_tags</span></span><br><span class="line"><span class="comment">//   foreign key: blog_id, reference: blogs.id</span></span><br><span class="line"><span class="comment">//   foreign key: blog_locale, reference: blogs.locale</span></span><br><span class="line"><span class="comment">//   foreign key: tag_id, reference: tags.id</span></span><br><span class="line"><span class="comment">//   foreign key: tag_locale, reference: tags.locale</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接表：locale_blog_tags</span></span><br><span class="line"><span class="comment">//   foreign key: blog_id, reference: blogs.id</span></span><br><span class="line"><span class="comment">//   foreign key: blog_locale, reference: blogs.locale</span></span><br><span class="line"><span class="comment">//   foreign key: tag_id, reference: tags.id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接表：shared_blog_tags</span></span><br><span class="line"><span class="comment">//   foreign key: blog_id, reference: blogs.id</span></span><br><span class="line"><span class="comment">//   foreign key: tag_id, reference: tags.id</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gorm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
